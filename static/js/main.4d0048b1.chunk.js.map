{"version":3,"sources":["components/Home.js","components/Feature.js","components/NavBar.js","components/Header.js","components/About.js","components/Teacher.js","courses/CourseContainer.js","components/Courses.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","name","topic","Form","onSubmit","e","preventDefault","teacherName","value","teacherTopic","path","history","push","Row","Col","Control","placeholder","ref","input","Button","variant","type","Feature","match","params","NavBar","Navbar","bg","Nav","className","exact","to","Header","About","title","Teacher","CourseContainer","Courses","url","render","NotFound","App","component","Teachers","Component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d0048b1.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form, Col, Row, Button } from \"react-bootstrap\";\n\nconst Home = (props) => {\n\n    let name;\n    let topic;\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        let teacherName = name.value;\n        let teacherTopic = topic.value;\n        let path = `/teachers/${teacherTopic}/${teacherName}`;\n\n        props.history.push(path);\n    };\n\n    return (\n        <div>\n            <span>Home</span>\n            <Form onSubmit={handleSubmit}>\n                <Row>\n                    <Col>\n                        <Form.Control placeholder=\"First name\" ref={ (input) => name = input} />\n                    </Col>\n                    <Col>\n                        <Form.Control placeholder=\"Topic\" ref={ (input) => topic = input} />\n                    </Col>\n                    <Col>\n                        <Button variant=\"primary\" type=\"submit\">\n                            Submit\n                        </Button>\n                    </Col>\n                </Row>\n            </Form>\n        </div>\n    );\n};\n\nexport default Home;","import React from \"react\";\n\n\nconst Feature = (props) => {\n    const { match } = props;\n    let name = `${match.params.name}`;\n    let topic = match.params.topic;\n    return (\n        <div>\n            <span>Feature {name} {topic}</span>\n        </div>\n    );\n};\n\nexport default Feature;","import React from \"react\";\nimport {Navbar, Nav} from \"react-bootstrap\";\nimport { NavLink } from \"react-router-dom\";\n\nconst NavBar = () => {\n    return (\n        <Navbar bg=\"light\" variant=\"dark\">\n            <Nav className=\"mr-auto\">\n                <span className=\"mr-3\"><NavLink exact className=\"text-decoration-none\" to=\"/home\">Home</NavLink></span>\n                <span className=\"mr-3\"><NavLink className=\"text-decoration-none\" to=\"/about\">About</NavLink></span>\n                <span className=\"mr-3\"><NavLink className=\"text-decoration-none\" to=\"/courses\">Courses</NavLink></span>\n                <span className=\"mr-3\"><NavLink className=\"text-decoration-none\" to=\"/teachers\">Teacher</NavLink></span>\n            </Nav>\n        </Navbar>\n    );\n};\n\nexport default NavBar;","import React from \"react\";\nimport NavBar from \"./NavBar\";\n\nconst Header = () => {\n    return (\n        <div>\n            <br />\n            <NavBar/>\n            <br />\n        </div>\n    );\n};\n\nexport default Header;","import React from \"react\";\n\n\nconst About = (props) => {\n    return (\n        <div>\n            <span>About - {props.title}</span>\n        </div>\n    );\n};\n\nexport default About;","import React from \"react\";\n\n\nconst Teacher = (props) => {\n    return (\n        <div>\n            <span>A teacher is a person that ...</span>\n        </div>\n    );\n};\n\nexport default Teacher;","import React from \"react\";\n\n\nconst CourseContainer = (props) => {\n    return (\n        <div>\n            <span>{props.title}</span>\n        </div>\n    );\n};\n\nexport default CourseContainer;","import React from \"react\";\nimport {NavLink, Route, Redirect} from \"react-router-dom\";\nimport CourseContainer from \"../courses/CourseContainer\";\n\n\nconst Courses = ({ match }) => {\n    return (\n        <div>\n           <div>\n               <h2>Courses</h2>\n               <ul>\n                   <li><NavLink to={`${match.url}/html`}>HTML</NavLink></li>\n                   <li><NavLink to={`${match.url}/css`}>CSS</NavLink></li>\n                   <li><NavLink to={`${match.url}/js`}>JS</NavLink></li>\n               </ul>\n           </div>\n\n            <Route exact path={`${match.path}`} render={() => <Redirect to={`${match.path}/html`}/>}/>\n            <Route path={`${match.path}/html`} render={() => <CourseContainer title=\"HTML\"/>}/>\n            <Route path={`${match.path}/css`} render={() => <CourseContainer title=\"CSS\"/>}/>\n            <Route path={`${match.path}/js`} render={() => <CourseContainer title=\"JS\"/>}/>\n        </div>\n    );\n};\n\nexport default Courses;","import React from \"react\";\n\n\nconst NotFound = () => {\n    return (\n        <div>\n            <span>Page not found 404</span>\n        </div>\n    );\n};\n\nexport default NotFound;","import React, {Component} from 'react';\nimport {BrowserRouter, Route, Switch, Redirect} from 'react-router-dom';\n\n// App components\nimport Home from \"./components/Home\";\nimport Feature from \"./components/Feature\";\nimport Header from \"./components/Header\";\nimport About from \"./components/About\";\nimport Teachers from \"./components/Teacher\";\nimport Courses from \"./components/Courses\";\nimport NotFound from \"./components/NotFound\";\n\nclass App extends Component {\n\n    render() {\n        return (\n            <BrowserRouter>\n                <div className=\"container\">\n                    <Header/>\n                    <Switch>\n                        <Route exact path=\"/\" render={() => <Redirect to=\"/home\"/>}/>\n                        <Route path=\"/home\" render={() => <Home />}/>\n                        <Route path=\"/about\" render={() => <About title='About'/>}/>\n                        <Route exact path=\"/teachers\" component={Teachers}/>\n                        <Route path=\"/teachers/:topic/:name\" component={Feature}/>\n                        <Route path=\"/courses\" component={Courses}/>\n                        <Route component={NotFound}/>\n                    </Switch>\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}